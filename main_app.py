import streamlit as st
import pandas as pd
import disease_predictors.disease_predictor_main as disease_predictor
import active_ingredients_mapper.disease_mapper as disease_actv_mapper
import medicine_mapper.active_ingredient_scraper as actv_med_scraper
import outputs_processor as pro
import plotter as pl

MODELS_MAP = {
    'RoBERTa Model': 'roberta',
    'Custom Model': 'custom',
    'Groq AI Model': 'groq',
}

# Sidebar navigation
page = st.sidebar.radio("Choose a page", ["Disease Prediction", "How to Use the App"])

# **Disease Prediction Page**
if page == "Disease Prediction":
    # Title of the app
    st.title("H-Medic/Predictor: Disease Prediction & Medicine Recommendation")

    # 1. Input Field to Get Symptoms or Disease
    input_text = st.text_area("Enter Symptoms or Disease", placeholder="Please Enter Symptoms or Diseases Here")

    # 2. Fancy Radio Button or Button to Specify If it's Symptoms or Disease
    input_type = st.radio(
        "Is the input text about Symptoms or a Disease?",
        ('Symptoms', 'Disease')
    )

    if input_type == 'Symptoms':
        # Dropdown Menu to Select the Disease Prediction Model
        model_option = st.selectbox(
            "Select Disease Prediction Model",
            ('Custom Model', 'RoBERTa Model', 'Groq AI Model'),
        )


    # Create a DataFrame for displaying the entered information
    input_data = {
        "Entered Input": [input_text.strip().strip(' ').split('/')],
        "Input Type": [input_type],
        "Prediction Model": [model_option] if input_type == 'Symptoms' else ["-"]
    }

    # Convert the dictionary to a DataFrame
    input_df = pd.DataFrame(input_data)

    # Display the table
    st.write(input_df)

    # Button to trigger prediction or active mapping
    if st.button("Process Input"):
        try:
            df_converter = pro.DiseaseOutputProcessor()

            if input_type == 'Disease':
                actv_mapper = disease_actv_mapper.DiseaseActvIngMapper()
                actv_res = actv_mapper.map_pridected_diseases_to_actv(input_data['Entered Input'][0])
                df_converter.actv_res = actv_res
                actv_df = df_converter.diseases_to_actv_df()

                # Subtitle and note for the Disease prediction output
                st.markdown("<h3 style='font-size: 24px;'>Active Ingredient Mapping for Predicted Diseases:</h3>", unsafe_allow_html=True)
                st.write(actv_df)

                st.markdown("<p style='font-size: 14px; color: gray;'>"
                            "<strong>Note:</strong> The active ingredient mappings shown here are based on predicted diseases. "
                            "Please note that these results are based on an algorithm and should not replace professional medical advice. "
                            "We strongly recommend consulting with a healthcare professional for an accurate diagnosis and treatment plan. "
                            "This prediction could potentially be incorrect and should be used for informational purposes only.</p>", unsafe_allow_html=True)

                del actv_mapper
                df_converter.actv_res = None

            if input_type == 'Symptoms':
                predictor = disease_predictor.DiseasePredictionContext()
                predictor.set_predictor(MODELS_MAP[model_option])
                predicted_diseases = predictor.predict(input_data['Entered Input'][0])
                df_converter.predicted_diseases = predicted_diseases
                diseases_df = df_converter.predicted_diseases_to_df()

                # Subtitle and note for Disease Prediction output
                st.markdown("<h3 style='font-size: 24px;'>Predicted Diseases Based on Symptoms:</h3>", unsafe_allow_html=True)
                st.write(diseases_df)

                st.markdown("<p style='font-size: 14px; color: gray;'>"
                            "<strong>Note:</strong> The diseases predicted are based on the symptoms you entered. "
                            "This prediction is generated by an AI/ML model and may not be fully accurate. "
                            "It is important to understand that medical diagnoses require professional expertise and physical examination. "
                            "Always consult with a healthcare provider to confirm a diagnosis and explore appropriate treatment options.</p>", unsafe_allow_html=True)

                del predictor
                df_converter.predicted_diseases = None

                # Generate and display the plot using the plotter class
                plotter = pl.DiseasePredictionPlotter()
                fig = plotter.generate_bar_chart(diseases_df)
                st.plotly_chart(fig)

                actv_mapper = disease_actv_mapper.DiseaseActvIngMapper()
                actv_res = actv_mapper.map_pridected_diseases_to_actv(predicted_diseases=predicted_diseases)
                df_converter.actv_res = actv_res
                actv_df = df_converter.diseases_to_actv_df()

                # Subtitle for Active Ingredient mapping
                st.markdown("<h3 style='font-size: 24px;'>Active Ingredient Mapping for Predicted Diseases:</h3>", unsafe_allow_html=True)
                st.write(actv_df)

                st.markdown("<p style='font-size: 14px; color: gray;'>"
                            "<strong>Note:</strong> These active ingredient mappings are based on the predicted diseases. "
                            "This prediction is purely informational and may not be suitable for actual treatment without confirmation by a medical professional. "
                            "Please do not take any medications based on these predictions alone. Always seek advice from a qualified healthcare provider before taking any medication.</p>", unsafe_allow_html=True)

                del actv_mapper
                df_converter.actv_res = None

            # Scrape medicines data
            med_scraper = actv_med_scraper.DrugEyeActvIngScraper()
            med_res = med_scraper.scrape_multiple_data(actv_res)

            # Convert to DataFrame
            df_converter.diseases_dict = med_res
            med_df = df_converter.diseases_to_med_df()

            # Subtitle for medicines
            st.markdown("<h3 style='font-size: 24px;'>Medicines Based on Active Ingredients:</h3>", unsafe_allow_html=True)
            st.write(med_df)

            st.markdown("<p style='font-size: 14px; color: gray;'>"
                        "<strong>Note:</strong> The medicines listed here are based on the active ingredients mapped from the predicted diseases. "
                        "However, this list should not be used to make medical decisions without consulting a healthcare professional. "
                        "Always speak to a doctor or a pharmacist before taking any medication. "
                        "These medicines may have side effects, interactions with other medications, or be unsuitable for certain conditions. "
                        "Please seek medical guidance for safe and effective treatment options.</p>", unsafe_allow_html=True)

            del med_scraper
            df_converter.diseases_dict = None

        except Exception as e:
            st.error(f"Error during prediction or mapping: {e}")

# **How to Use the App Page**
elif page == "How to Use the App":
    st.title("How to Use H-Medic")

    st.markdown("""
    ### Welcome to H-Medic!
    This app helps in predicting diseases based on symptoms, recommending treatments, and finding medicines related to active ingredients. 

    ### How It Works:
    - **Step 1**: Enter symptoms or a disease name.
    - **Step 2**: Choose the input type (Symptoms or Disease).
    - **Step 3**: Select a disease prediction model (if symptoms are provided).
    - **Step 4**: Click "Process Input" to get predictions, active ingredient mapping, and recommended medicines.

    ### Disease Prediction Models:
    #### 1. **Custom Model**:
    - A basic machine learning model with lower accuracy. It may work well for fast general predictions but is not ideal for precise medical advice.

    #### 2. **RoBERTa Model**:
    - This is a pre-trained model from Hugging Face, providing better accuracy than the custom model. RoBERTa is a transformer-based model that has been trained on vast amounts of data, improving its prediction capabilities for disease detection.

    #### 3. **Groq AI Model (Llama3-8B-8192)**:
    - This is the most advanced model available, based on Groq AI's Llama3-8B-8192 architecture. It uses an 8-billion parameter transformer and provides high accuracy in predicting diseases. It's the best option for obtaining reliable and precise predictions based on symptoms.

    ### Notes:
    - **Medical Disclaimer**: The predictions provided by this app are for informational purposes only and should not replace professional medical advice. Always consult a healthcare provider for accurate diagnosis and treatment.
    """)

